<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on PurpleScreen</title>
    <link>https://purple-screen.com/post/</link>
    <description>Recent content in Posts on PurpleScreen</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 15 Apr 2014 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://purple-screen.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Restarting managements agents</title>
      <link>https://purple-screen.com/2014/04/15/restarting-managements-agents/</link>
      <pubDate>Tue, 15 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://purple-screen.com/2014/04/15/restarting-managements-agents/</guid>
      <description>You know the situation when the host stops reporting its performance counters, do you? CPU and RAM load are showing nils.. This snippet will fix the issue:
Get-View -ViewType HostSystem ` -Filter @{&amp;#39;Summary.QuickStats.Uptime&amp;#39;=&amp;#39;^0$&amp;#39;} ` -Property Name,ConfigManager | % { (Get-View $_.ConfigManager.ServiceSystem).RestartService(&amp;#39;vpxa&amp;#39;) } 2&amp;gt;$null </description>
    </item>
    
    <item>
      <title>The power of Get-View</title>
      <link>https://purple-screen.com/2014/02/05/the-power-of-get-view/</link>
      <pubDate>Wed, 05 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://purple-screen.com/2014/02/05/the-power-of-get-view/</guid>
      <description>Today we&amp;rsquo;re going to discover very powerful Get-View cmdlet. I&amp;rsquo;m sure most of you have seen it in many scripts found across the web. This cmdlet returns .NET view objects thus exposing API methods and properties to PowerShell environment. This is crucial in advanced manipulating with vSphere infrastructure.
First, it&amp;rsquo;s worth mentioning that getting implementation objects (those produced by Get-VM, Get-VMHost, etc) takes more time than getting view objects, though in the last versions I found the gap decreased significantly.</description>
    </item>
    
    <item>
      <title>PowerShell scheduled job output redirection</title>
      <link>https://purple-screen.com/2013/12/23/powershell-scheduled-job-output-redirection/</link>
      <pubDate>Mon, 23 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>https://purple-screen.com/2013/12/23/powershell-scheduled-job-output-redirection/</guid>
      <description>Scheduling the script execution is rather common task. You might know that it&amp;rsquo;s possible to manage scheduled tasks in PowerShell with built-in ScheduledTask module cmdlets. To keep track whether the task ran successfully or not it&amp;rsquo;s quite useful to redirect the output of the script to a file. PowerShell allows output redirection for all stream types (standard/error/warning/etc), see TechNet about_Redirection help topic.
To be able to run your scripts with -Verbose option you should leverage Advanced_Functions syntax (see another Core About topic).</description>
    </item>
    
    <item>
      <title>ForEach: cmdlet vs keyword</title>
      <link>https://purple-screen.com/2013/06/15/foreach-cmdlet-vs-keyword/</link>
      <pubDate>Sat, 15 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>https://purple-screen.com/2013/06/15/foreach-cmdlet-vs-keyword/</guid>
      <description>Here is a little note about the difference of these two loop constructions.
foreach is a reserved keyword in PowerShell that allows you to loop through a collection of objects and make some action on every item. Inside the foreach loop $foreach automatic variable is available. It presents the loop enumerator and can be used, for instance, to skip the current object in collection (.MoveNext() method).
ForEach-Object is a cmdlet doing almost the same thing but the difference is the usecase.</description>
    </item>
    
    <item>
      <title>VMware UUIDs</title>
      <link>https://purple-screen.com/2013/05/31/vmware-uuids/</link>
      <pubDate>Fri, 31 May 2013 00:00:00 +0000</pubDate>
      
      <guid>https://purple-screen.com/2013/05/31/vmware-uuids/</guid>
      <description>Hi everybody! My first post is about UUIDs - identifiers used for virtual machines in vSphere infrastructure. If you ever looked in *.vmx config file you could see 3 different lines containing 128-bit hex numbers. They are:
 uuid.bios uuid.location vc.uuid  Because of having some issues with software licensing inside guest OS I decided to explore what every value is responsible for. Web didn&amp;rsquo;t give me the complete answer about the meaning of all of these parameters, so my investigations led me to the following conclusion I&amp;rsquo;d like to share with you.</description>
    </item>
    
  </channel>
</rss>