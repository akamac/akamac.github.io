<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog </title>
    <link>https://purple-screen.com/</link>
    <language>en-us</language>
    <author>Mark Otto</author>
    <rights>(C) 2014</rights>
    <updated>2014-04-15 00:00:00 &#43;0000 UTC</updated>

    
      
    
      
    
      
        <item>
          <title>The power of Get-View</title>
          <link>https://purple-screen.com/2014/02/05/the-power-of-get-view/</link>
          <pubDate>Wed, 05 Feb 2014 00:00:00 UTC</pubDate>
          <author>Mark Otto</author>
          <guid>https://purple-screen.com/2014/02/05/the-power-of-get-view/</guid>
          <description>

&lt;p&gt;Today we&amp;rsquo;re going to discover very powerful Get-View cmdlet. I&amp;rsquo;m sure most of you have seen it in many scripts found across the web. This cmdlet returns .NET view objects thus exposing API methods and properties to PowerShell environment. This is crucial in advanced manipulating with vSphere infrastructure.&lt;/p&gt;

&lt;p&gt;First, it&amp;rsquo;s worth mentioning that getting implementation objects (those produced by &lt;code&gt;Get-VM&lt;/code&gt;, &lt;code&gt;Get-VMHost&lt;/code&gt;, etc) takes more time than getting view objects, though in the last versions I found the gap decreased significantly. Let&amp;rsquo;s discover the available parameters that need to be discussed:&lt;/p&gt;

&lt;h3 id=&#34;viobject-id&#34;&gt;-VIObject, -Id&lt;/h3&gt;

&lt;p&gt;View object can be retrieved by MoRef &lt;code&gt;-Id&lt;/code&gt; or by passing the impl object &lt;code&gt;-VIObject&lt;/code&gt; to the cmdlet. Don&amp;rsquo;t forget to use &lt;code&gt;-Server&lt;/code&gt; parameter when retrieving objects by MoRef if you are working with multiple default vCenter servers since MoRefs are not unique across different vCenter servers.&lt;/p&gt;

&lt;h3 id=&#34;property&#34;&gt;-Property&lt;/h3&gt;

&lt;p&gt;This parameter allows you to limit the object properties to be retrieved and can significantly speed up the query execution. Going ahead, one interesting thing you may wonder while using this parameter together with &lt;code&gt;-Filter&lt;/code&gt;: does the property that objects are filtered by need to be specified here? The answer is no, they do not.&lt;/p&gt;

&lt;h3 id=&#34;filter&#34;&gt;-Filter&lt;/h3&gt;

&lt;p&gt;This parameter accepts a hash table: &lt;code&gt;@{Name=&#39;^TestVM[1-9]$&#39;; &#39;Config.Version&#39;=&#39;7&#39;; &#39;Snapshot&#39;=&#39;&#39;}&lt;/code&gt;, where both keys and values represent the strings and imply that for any object returned every specified key must match the corresponding value. The key can be any nested property but not the property of linked object - for linked objects use &lt;code&gt;-SearchRoot&lt;/code&gt; parameter (more on that later). You can use the power of regular expressions for value strings. You may wonder how to test whether the property exists for the object? Just specify this property with the empty value. The example above will filter all vms with name matching &lt;code&gt;TestVM&lt;/code&gt;, hardware version equal to &lt;code&gt;vmx-07&lt;/code&gt; and for which at least one snapshot exists.&lt;/p&gt;

&lt;p&gt;Filtering on the server side prevents the objects that don&amp;rsquo;t satisfy the specified criteria to be transfered to the client, thus it again increases the performance.&lt;/p&gt;

&lt;h3 id=&#34;viewtype&#34;&gt;-ViewType&lt;/h3&gt;

&lt;p&gt;The parameter allows you to query for object of a specific type. To learn more about types, inheritance and so on go to &lt;a href=&#34;https://code.vmware.com/apis/449/vsphere&#34;&gt;API reference guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Another really useful types of objects that can be retrieved by Get-View are different types of managers. The full list can be obtained with &lt;code&gt;(Get-View ServiceInstance).Content&lt;/code&gt; call.&lt;/p&gt;

&lt;p&gt;One can use them to manipulate alarms (&lt;code&gt;Get-View AlarmManager&lt;/code&gt;), tasks (&lt;code&gt;Get-View TaskManager&lt;/code&gt;), files and so on. So it&amp;rsquo;s very useful stuff too.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Ok, this part is done. Now let&amp;rsquo;s explore the base view object. We have an interesting liaison here: &lt;code&gt;UpdateViewData()&lt;/code&gt; method and &lt;code&gt;.LinkedView&lt;/code&gt; property.&lt;/p&gt;

&lt;p&gt;Until &lt;code&gt;UpdateViewData()&lt;/code&gt; is invoked, the &lt;code&gt;.LinkedView&lt;/code&gt; property is empty. Parameters of &lt;code&gt;UpdateViewData()&lt;/code&gt; invocation are (multiple) properties of the current or linked object you want to obtain. Together with a property name, we can specify a property object type. In some cases it&amp;rsquo;s quite useful to restrict the possible values, if the property is the list of object of different types. Let&amp;rsquo;s see an example: consider navigating through inventory folders - every time you want to get the child objects, but only those of type &lt;em&gt;Folder&lt;/em&gt;:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;$FolderView = Get-View -ViewType Folder -Property Name -Filter @{Name=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;RootFolder&amp;#39;&lt;/span&gt;}
&lt;span style=&#34;color:#75715e&#34;&gt;# The call will retrieve ChildEntity property for the current folder. No linked views are populated&lt;/span&gt;
$FolderView.UpdateViewData(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ChildEntity&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# The call below will fill the LinkedView property&lt;/span&gt;
$FolderView.UpdateViewData(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ChildEntity.*&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# or you can restrict the child objects retrieved to folders with only Name and ChildEntity properties obtained&lt;/span&gt;
$FolderView.UpdateViewData(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;[Folder]ChildEntity.Name&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;[Folder]ChildEntity.ChildEntity&amp;#39;&lt;/span&gt;)&amp;lt;/pre&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The type restriction is neccessary when you specify the property path that include containers and this property doesn&amp;rsquo;t belong to all entities a container can include. Thus &lt;code&gt;$FolderView.UpdateViewData(&#39;ChildEntity.ChildEntity&#39;)&lt;/code&gt; won&amp;rsquo;t work because folder can include vm objects for which &lt;code&gt;ChildEntity&lt;/code&gt; property isn&amp;rsquo;t defined.&lt;/p&gt;

&lt;p&gt;Got it? Then another example of digging even deeper:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;$VmView = Get-View -ViewType VirtualMachine -Property Name -Filter @{Name=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;TestVM&amp;#39;&lt;/span&gt;}
$VmView.UpdateViewData(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Runtime.Host.Datastore.Name&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# will extract the names of all datastores connected to host where vm is currently running&lt;/span&gt;
$VmView.Runtime.LinkedView.Host.LinkedView.Datastore.Name&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So, instead of calling Get-View multiple times you can leverage &lt;code&gt;UpdateViewData()&lt;/code&gt; method call. It &lt;a href=&#34;http://www.vnugglets.com/2012/08/even-faster-powercli-code-with-get-view.html&#34;&gt;really accelerates&lt;/a&gt; your scripts where you need to get nested view objects.&lt;/p&gt;

&lt;p&gt;Now that you are aware of the foundation of advanced PowerCLI scripting, use &lt;code&gt;Get-View&lt;/code&gt; in your scripts when processing the bulk of data and the speed is a vital factor. When operating few objects stay with common impl-getting cmdlets not to loose the simplicity of your scripts.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>PowerShell scheduled job output redirection</title>
          <link>https://purple-screen.com/2013/12/23/powershell-scheduled-job-output-redirection/</link>
          <pubDate>Mon, 23 Dec 2013 00:00:00 UTC</pubDate>
          <author>Mark Otto</author>
          <guid>https://purple-screen.com/2013/12/23/powershell-scheduled-job-output-redirection/</guid>
          <description>&lt;p&gt;Scheduling the script execution is rather common task. You might know that it&amp;rsquo;s possible to manage scheduled tasks in PowerShell with built-in ScheduledTask module cmdlets. To keep track whether the task ran successfully or not it&amp;rsquo;s quite useful to redirect the output of the script to a file. PowerShell allows output redirection for all stream types (standard/error/warning/etc), see &lt;a href=&#34;https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_redirection&#34;&gt;TechNet about_Redirection help topic&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To be able to run your scripts with &lt;code&gt;-Verbose&lt;/code&gt; option you should leverage &lt;em&gt;Advanced_Functions&lt;/em&gt; syntax (see &lt;a href=&#34;https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_functions_advanced&#34;&gt;another Core About topic&lt;/a&gt;). Just add couple of strings to the beginning of the script:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;[CmdletBinding()]
param()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and use &lt;code&gt;Write-Verbose&lt;/code&gt; cmdlet throughout the script where chatty output is needed. At first glance it seems to be an easy task to combine all the mentioned together, but in fact I saw lots of questions across the web where people struggled to make it work. Indeed, it took much effort before I succeeded. I&amp;rsquo;ve tested many different configuration and most of them didn&amp;rsquo;t work for me too. That&amp;rsquo;s what I came up with and it worked for me:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Register-ScheduledJob .. -ScriptBlock { C:\Scheduled.ps1 -Verbose *&amp;gt; &#39;C:\Scheduled.log&#39; }
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
      
    
      
        <item>
          <title>ForEach: cmdlet vs keyword</title>
          <link>https://purple-screen.com/2013/06/15/foreach-cmdlet-vs-keyword/</link>
          <pubDate>Sat, 15 Jun 2013 00:00:00 UTC</pubDate>
          <author>Mark Otto</author>
          <guid>https://purple-screen.com/2013/06/15/foreach-cmdlet-vs-keyword/</guid>
          <description>&lt;p&gt;Here is a little note about the difference of these two loop constructions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;foreach&lt;/strong&gt; is a reserved keyword in PowerShell that allows you to loop through a collection of objects and make some action on every item. Inside the foreach loop &lt;code&gt;$foreach&lt;/code&gt; automatic variable is available. It presents the loop enumerator and can be used, for instance, to skip the current object in collection (&lt;code&gt;.MoveNext()&lt;/code&gt; method).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ForEach-Object&lt;/strong&gt; is a cmdlet doing almost the same thing but the difference is the usecase. Since the collection is piped to the cmdlet the objects are pushed down the pipeline as soon as they are generated. It affects the performance greatly when a collection isn&amp;rsquo;t created at the start of processing. When the latter is long-time operation, using the cmdlet you can achieve much better overall performance than using its sibling keyword. In other cases one should consider using the keyword for higher execution speed.&lt;/p&gt;

&lt;p&gt;Since both have the same alias &lt;code&gt;foreach&lt;/code&gt;, PowerShell parser is smart enough to choose the appropriate construction depending on the place it is used.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>VMware UUIDs</title>
          <link>https://purple-screen.com/2013/05/31/vmware-uuids/</link>
          <pubDate>Fri, 31 May 2013 00:00:00 UTC</pubDate>
          <author>Mark Otto</author>
          <guid>https://purple-screen.com/2013/05/31/vmware-uuids/</guid>
          <description>&lt;p&gt;Hi everybody! My first post is about UUIDs - identifiers used for virtual machines in vSphere infrastructure. If you ever looked in &lt;code&gt;*.vmx&lt;/code&gt; config file you could see 3 different lines containing 128-bit hex numbers. They are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;uuid.bios&lt;/li&gt;
&lt;li&gt;uuid.location&lt;/li&gt;
&lt;li&gt;vc.uuid&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Because of having some issues with software licensing inside guest OS I decided to explore what every value is responsible for. Web didn&amp;rsquo;t give me the complete answer about the meaning of all of these parameters, so my investigations led me to the following conclusion I&amp;rsquo;d like to share with you.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;uuid.bios&lt;/strong&gt; - this value acts as GUID analog in physical machine, you should keep it to make the license not to get broken. If you want to export vm, for example using vCenter Converter, and run it in VMware Player/Workstation you should also add the following line to exported vmx file together with copying the source uuid.bios value: &lt;code&gt;uuid.action = &amp;quot;keep&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It prevents player/workstation from asking whether you moved or copied vm with the default answer &lt;em&gt;I moved it&lt;/em&gt;. If the valid uuid.bios line is present in config file, it will be preserved and the software license will be okay. Another option for uuid.action is &lt;code&gt;&amp;quot;change&amp;quot;&lt;/code&gt;. In this case VMware will generate the value when you power on the vm in new location (host or even folder). You can read &lt;a href=&#34;http://kb.vmware.com/selfservice/microsites/search.do?language=en_US&amp;amp;cmd=displayKC&amp;amp;externalId=1541&#34;&gt;this KB article&lt;/a&gt; to learn more about it. So the &lt;code&gt;uuid.bios&lt;/code&gt; setting is done. Let&amp;rsquo;s look through others two.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;uuid.location&lt;/strong&gt; is generated every time vm is vMotion&amp;rsquo;ed to another host/storage. I guess it&amp;rsquo;s used by vCenter for some internal purposes like ..&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;vc.uuid&lt;/strong&gt; is used by vCenter to identify vm together with MoRef ID you&amp;rsquo;ve seen while working with PowerCLI. It&amp;rsquo;s unique and is generated when you add a vm to inventory (or create a vm). If the value is already present in the config file (and there is no duplicate in the current inventory), it&amp;rsquo;s left intact.&lt;/p&gt;
</description>
        </item>
      
    

  </channel>
</rss>
