<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Powershell on Blog</title>
    <link>https://purple-screen.com/categories/powershell/</link>
    <description>Recent content in Powershell on Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 10 Jun 2014 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://purple-screen.com/categories/powershell/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Manage Zip archives with PowerShell</title>
      <link>https://purple-screen.com/2014/06/10/manage-zip-archives-with-powershell/</link>
      <pubDate>Tue, 10 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>https://purple-screen.com/2014/06/10/manage-zip-archives-with-powershell/</guid>
      <description>I know there are lots of examples and function implementations out there (for instance, the one from jaykul), nonetheless I&amp;rsquo;d like to add my 2 cents. Even 5c, since my version is more powerful :) It allows you to set compression level, append/replace files to/in existing archives and extract only necessary files from archive.
For instance, to extract vmware.xml file from the archive&amp;rsquo;s root and all the files from the vib folder stored in root also (yep, we&amp;rsquo;re expanding metadata.</description>
    </item>
    
    <item>
      <title>PowerShell scheduled job output redirection</title>
      <link>https://purple-screen.com/2013/12/23/powershell-scheduled-job-output-redirection/</link>
      <pubDate>Mon, 23 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>https://purple-screen.com/2013/12/23/powershell-scheduled-job-output-redirection/</guid>
      <description>Scheduling the script execution is rather common task. You might know that it&amp;rsquo;s possible to manage scheduled tasks in PowerShell with built-in ScheduledTask module cmdlets. To keep track whether the task run successfully or not it&amp;rsquo;s quite useful to redirect the output of the script to a file. PowerShell allows output redirection for all stream types (standard/error/warning/etc), see TechNet about_Redirection help topic.
To be able to run your scripts with -Verbose option you should leverage Advanced_Functions syntax (see another Core About topic).</description>
    </item>
    
    <item>
      <title>Dynamic parameters</title>
      <link>https://purple-screen.com/2013/09/08/dynamic-parameters/</link>
      <pubDate>Sun, 08 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://purple-screen.com/2013/09/08/dynamic-parameters/</guid>
      <description>Today we&amp;rsquo;re going to touch on dynamic parameters available in advanced functions. These are parameters that are added at run-time depending on the environment. The great example is the parameters that are dynamically exposed to the current parameter set of Get-Item cmdlet based on PS provider (FileSystem, Registry) used.
Faced it once, you should have found out that simply adding such a parameter to the function means writing a bunch of code.</description>
    </item>
    
    <item>
      <title>Join-Object</title>
      <link>https://purple-screen.com/2013/07/20/join-object/</link>
      <pubDate>Sat, 20 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://purple-screen.com/2013/07/20/join-object/</guid>
      <description>If you ever wrote SQL queries and now use PowerShell for scripting maybe you missed &amp;#8216;Join&amp;rsquo; possibility in PoSH. Here it is!
Nothing special. I just tried to create Join-Object with the same functionality as inner/outer Join statements in SQL. My version of Join-Object uses standalone Merge-Object function for merging 2 arrays of custom objects / hashtables. Resulting object is an array of objects that contains all properties from joined objects except the ones with the same name, which are discarded.</description>
    </item>
    
    <item>
      <title>ForEach: cmdlet vs keyword</title>
      <link>https://purple-screen.com/2013/06/15/foreach-cmdlet-vs-keyword/</link>
      <pubDate>Sat, 15 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>https://purple-screen.com/2013/06/15/foreach-cmdlet-vs-keyword/</guid>
      <description>Here is a little note about the difference of these two loop constructions.
foreach is a reserved keyword in PoSH that allows you to loop through collection of objects and make some action on every item. Inside the foreach loop $foreach automatic variable is available. It presents the loop enumerator and can be used, for instance, to skip the current object in collection (.MoveNext() method).
ForEach-Object is a cmdlet doing almost the same thing but the difference is the usecase.</description>
    </item>
    
  </channel>
</rss>