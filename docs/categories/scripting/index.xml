<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Scripting on Blog</title>
    <link>https://purple-screen.com/categories/scripting/</link>
    <description>Recent content in Scripting on Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 10 Jun 2014 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://purple-screen.com/categories/scripting/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Manage Zip archives with PowerShell</title>
      <link>https://purple-screen.com/2014/06/10/manage-zip-archives-with-powershell/</link>
      <pubDate>Tue, 10 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>https://purple-screen.com/2014/06/10/manage-zip-archives-with-powershell/</guid>
      <description>I know there are lots of examples and function implementations out there (for instance, the one from jaykul), nonetheless I&amp;rsquo;d like to add my 2 cents. Even 5c, since my version is more powerful :) It allows you to set compression level, append/replace files to/in existing archives and extract only necessary files from archive.
For instance, to extract vmware.xml file from the archive&amp;rsquo;s root and all the files from the vib folder stored in root also (yep, we&amp;rsquo;re expanding metadata.</description>
    </item>
    
    <item>
      <title>Restarting managements agents</title>
      <link>https://purple-screen.com/2014/04/15/restarting-managements-agents/</link>
      <pubDate>Tue, 15 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://purple-screen.com/2014/04/15/restarting-managements-agents/</guid>
      <description>You know the situation when the host stops reporting its performance counters, do you? CPU and RAM load are showing nils.. This snippet will fix the issue:
Get-View -ViewType HostSystem ` -Filter @{&amp;#39;Summary.QuickStats.Uptime&amp;#39;=&amp;#39;^0$&amp;#39;} ` -Property Name,ConfigManager | % { (Get-View $_.ConfigManager.ServiceSystem).RestartService(&amp;#39;vpxa&amp;#39;) } 2&amp;gt;$null </description>
    </item>
    
    <item>
      <title>PowerShell scheduled job output redirection</title>
      <link>https://purple-screen.com/2013/12/23/powershell-scheduled-job-output-redirection/</link>
      <pubDate>Mon, 23 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>https://purple-screen.com/2013/12/23/powershell-scheduled-job-output-redirection/</guid>
      <description>Scheduling the script execution is rather common task. You might know that it&amp;rsquo;s possible to manage scheduled tasks in PowerShell with built-in ScheduledTask module cmdlets. To keep track whether the task run successfully or not it&amp;rsquo;s quite useful to redirect the output of the script to a file. PowerShell allows output redirection for all stream types (standard/error/warning/etc), see TechNet about_Redirection help topic.
To be able to run your scripts with -Verbose option you should leverage Advanced_Functions syntax (see another Core About topic).</description>
    </item>
    
    <item>
      <title>Dynamic parameters</title>
      <link>https://purple-screen.com/2013/09/08/dynamic-parameters/</link>
      <pubDate>Sun, 08 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://purple-screen.com/2013/09/08/dynamic-parameters/</guid>
      <description>Today we&amp;rsquo;re going to touch on dynamic parameters available in advanced functions. These are parameters that are added at run-time depending on the environment. The great example is the parameters that are dynamically exposed to the current parameter set of Get-Item cmdlet based on PS provider (FileSystem, Registry) used.
Faced it once, you should have found out that simply adding such a parameter to the function means writing a bunch of code.</description>
    </item>
    
  </channel>
</rss>