<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Blog</title>
    <link>https://purple-screen.com/post/</link>
    <description>Recent content in Posts on Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 23 Jul 2014 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://purple-screen.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Expand RDM in virtual compatibility mode</title>
      <link>https://purple-screen.com/2014/07/23/expand-rdm-in-virtual-compatibility-mode/</link>
      <pubDate>Wed, 23 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://purple-screen.com/2014/07/23/expand-rdm-in-virtual-compatibility-mode/</guid>
      <description>If you cannot see a new capacity after increasing the LUN backing vRDM (known bug), the solution will be to vMotion a vm after rescanning HBA on the destination host. That&amp;rsquo;s easy.</description>
    </item>
    
    <item>
      <title>Manage Zip archives with PowerShell</title>
      <link>https://purple-screen.com/2014/06/10/manage-zip-archives-with-powershell/</link>
      <pubDate>Tue, 10 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>https://purple-screen.com/2014/06/10/manage-zip-archives-with-powershell/</guid>
      <description>I know there are lots of examples and function implementations out there (for instance, the one from jaykul), nonetheless I&amp;rsquo;d like to add my 2 cents. Even 5c, since my version is more powerful :) It allows you to set compression level, append/replace files to/in existing archives and extract only necessary files from archive.
For instance, to extract vmware.xml file from the archive&amp;rsquo;s root and all the files from the vib folder stored in root also (yep, we&amp;rsquo;re expanding metadata.</description>
    </item>
    
    <item>
      <title>Restarting managements agents</title>
      <link>https://purple-screen.com/2014/04/15/restarting-managements-agents/</link>
      <pubDate>Tue, 15 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://purple-screen.com/2014/04/15/restarting-managements-agents/</guid>
      <description>You know the situation when the host stops reporting its performance counters, do you? CPU and RAM load are showing nils.. This snippet will fix the issue:
Get-View -ViewType HostSystem ` -Filter @{&amp;#39;Summary.QuickStats.Uptime&amp;#39;=&amp;#39;^0$&amp;#39;} ` -Property Name,ConfigManager | % { (Get-View $_.ConfigManager.ServiceSystem).RestartService(&amp;#39;vpxa&amp;#39;) } 2&amp;gt;$null </description>
    </item>
    
    <item>
      <title>The power of Get-View</title>
      <link>https://purple-screen.com/2014/02/05/the-power-of-get-view/</link>
      <pubDate>Wed, 05 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://purple-screen.com/2014/02/05/the-power-of-get-view/</guid>
      <description>Today we&amp;rsquo;re going to discover very powerful Get-View cmdlet. I&amp;rsquo;m sure most of you have seen it in many scripts found across the web. This cmdlet returns .NET view objects thus exposing API methods and properties to PowerShell environment. This is crucial in advanced manipulating with vSphere infrastructure.
First, it&amp;rsquo;s worth mentioning that getting implementation objects (those produced by Get-VM, Get-VMHost, etc) takes more time than getting view objects, though in the last versions I found the gap decreased significantly.</description>
    </item>
    
    <item>
      <title>PowerShell scheduled job output redirection</title>
      <link>https://purple-screen.com/2013/12/23/powershell-scheduled-job-output-redirection/</link>
      <pubDate>Mon, 23 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>https://purple-screen.com/2013/12/23/powershell-scheduled-job-output-redirection/</guid>
      <description>Scheduling the script execution is rather common task. You might know that it&amp;rsquo;s possible to manage scheduled tasks in PowerShell with built-in ScheduledTask module cmdlets. To keep track whether the task run successfully or not it&amp;rsquo;s quite useful to redirect the output of the script to a file. PowerShell allows output redirection for all stream types (standard/error/warning/etc), see TechNet about_Redirection help topic.
To be able to run your scripts with -Verbose option you should leverage Advanced_Functions syntax (see another Core About topic).</description>
    </item>
    
    <item>
      <title>vCenter Converter 5 low processing rate</title>
      <link>https://purple-screen.com/2013/11/23/vcenter-converter-5-low-processing-rate/</link>
      <pubDate>Sat, 23 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://purple-screen.com/2013/11/23/vcenter-converter-5-low-processing-rate/</guid>
      <description>If you experience too slow conversion speed while doing P2V migration or other conversion task and see no reason for this, the solution might be to disable SSL encryption for data transfers between the agent and the server. To accomplish this open the file C:\ProgramData\VMware\VMware vCenter Converter Standalone\converter-worker.xml and disable SSL:
&amp;lt;nfc&amp;gt; &amp;lt;useSsl&amp;gt;false&amp;lt;/useSsl&amp;gt; &amp;lt;/nfc&amp;gt;  Restarting Converter Worker service is required. Hope this helps!</description>
    </item>
    
    <item>
      <title>Dynamic parameters</title>
      <link>https://purple-screen.com/2013/09/08/dynamic-parameters/</link>
      <pubDate>Sun, 08 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://purple-screen.com/2013/09/08/dynamic-parameters/</guid>
      <description>Today we&amp;rsquo;re going to touch on dynamic parameters available in advanced functions. These are parameters that are added at run-time depending on the environment. The great example is the parameters that are dynamically exposed to the current parameter set of Get-Item cmdlet based on PS provider (FileSystem, Registry) used.
Faced it once, you should have found out that simply adding such a parameter to the function means writing a bunch of code.</description>
    </item>
    
    <item>
      <title>Join-Object</title>
      <link>https://purple-screen.com/2013/07/20/join-object/</link>
      <pubDate>Sat, 20 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://purple-screen.com/2013/07/20/join-object/</guid>
      <description>If you ever wrote SQL queries and now use PowerShell for scripting maybe you missed &amp;#8216;Join&amp;rsquo; possibility in PoSH. Here it is!
Nothing special. I just tried to create Join-Object with the same functionality as inner/outer Join statements in SQL. My version of Join-Object uses standalone Merge-Object function for merging 2 arrays of custom objects / hashtables. Resulting object is an array of objects that contains all properties from joined objects except the ones with the same name, which are discarded.</description>
    </item>
    
    <item>
      <title>ForEach: cmdlet vs keyword</title>
      <link>https://purple-screen.com/2013/06/15/foreach-cmdlet-vs-keyword/</link>
      <pubDate>Sat, 15 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>https://purple-screen.com/2013/06/15/foreach-cmdlet-vs-keyword/</guid>
      <description>Here is a little note about the difference of these two loop constructions.
foreach is a reserved keyword in PoSH that allows you to loop through collection of objects and make some action on every item. Inside the foreach loop $foreach automatic variable is available. It presents the loop enumerator and can be used, for instance, to skip the current object in collection (.MoveNext() method).
ForEach-Object is a cmdlet doing almost the same thing but the difference is the usecase.</description>
    </item>
    
    <item>
      <title>VMware UUIDs</title>
      <link>https://purple-screen.com/2013/05/31/vmware-uuids/</link>
      <pubDate>Fri, 31 May 2013 00:00:00 +0000</pubDate>
      
      <guid>https://purple-screen.com/2013/05/31/vmware-uuids/</guid>
      <description>Hi everybody! My first post is about UUIDs - identifiers used for virtual machines in vSphere infrastructure. If you ever looked in vm config file (*.vmx) you could see 3 different lines containing 128-bit hex numbers. They are:
 uuid.bios uuid.location vc.uuid  Because of having some issues with software licensing inside guest OS I decided to explore what the every value is responsible for. Web hasn&amp;rsquo;t gave me the complete answer about the meaning of all of these parameters so my investigations led me to the following conclusion I&amp;rsquo;d like to share with you.</description>
    </item>
    
  </channel>
</rss>