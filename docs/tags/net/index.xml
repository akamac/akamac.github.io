<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Net on Blog</title>
    <link>https://purple-screen.com/tags/net/</link>
    <description>Recent content in Net on Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 10 Jun 2014 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://purple-screen.com/tags/net/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Manage Zip archives with PowerShell</title>
      <link>https://purple-screen.com/2014/06/10/manage-zip-archives-with-powershell/</link>
      <pubDate>Tue, 10 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>https://purple-screen.com/2014/06/10/manage-zip-archives-with-powershell/</guid>
      <description>I know there are lots of examples and function implementations out there (for instance, the one from jaykul), nonetheless I&amp;#8217;d like to add my 2 cents. Even 5c, since my version is more powerful :) It allows you to set compression level, append/replace files to/in existing archives and extract only necessary files from archive.
For instance, to extract vmware.xml file from the archive&amp;#8217;s root and all the files from the vib folder stored in root also (yep, we&amp;#8217;re expanding metadata.</description>
    </item>
    
    <item>
      <title>MySQL database manipulation from PowerShell</title>
      <link>https://purple-screen.com/2014/05/09/mysql-database-manipulation-from-powershell/</link>
      <pubDate>Fri, 09 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://purple-screen.com/2014/05/09/mysql-database-manipulation-from-powershell/</guid>
      <description>Download MySQL Connector/NET first.
Add-Type -Path &#39;C:\Program Files (x86)\MySQL\MySQL Connector Net 6.8.3\Assemblies\v4.5\MySql.Data.dll&#39; $Connection = [MySql.Data.MySqlClient.MySqlConnection]@{ConnectionString=&#39;server=&amp;lt;FQDN&amp;gt;;uid=&amp;lt;user&amp;gt;;pwd=&amp;lt;password&amp;gt;;database=&amp;lt;db&amp;gt;&#39;} $Connection.Open() $Command = $Connection.CreateCommand() $Command.CommandText = &#34;SELECT .. FROM .. WHERE ..&#34; $Reader = $Command.ExecuteReader() while ($Reader.Read()) { # $Reader array variable represents the table row } $Reader.Close() $Connection.Close() &amp;nbsp;</description>
    </item>
    
  </channel>
</rss>